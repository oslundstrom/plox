#!/usr/bin/env python3
import sys
from argparse import ArgumentParser
from pathlib import Path
from enum import Enum, auto


class TokenType(Enum):
    # Single character tokens
    LEFT_PAREN = auto()
    RIGHT_PAREN = auto()
    LEFT_BRACE = auto()
    RIGHT_BRACE = auto()
    COMMA = auto()
    DOT = auto()
    MINUS = auto()
    PLUS = auto()
    SEMICOLON = auto()
    SLASH = auto()
    STAR = auto()

    # One or two character tokens
    BANG = auto()
    BANG_EQUAL = auto()
    EQUAL = auto()
    EQUAL_EQUAL = auto()
    GREATER = auto()
    GREATER_EQUAL = auto()
    LESS = auto()
    LESS_EQUAL = auto()

    # Literals
    IDENTIFIER = auto()
    STRING = auto()
    NUMBER = auto()

    # Keywords
    AND = auto()
    CLASS = auto()
    ELSE = auto()
    FALSE = auto()
    FUN = auto()
    FOR = auto()
    IF = auto()
    NIL = auto()
    OR = auto()
    PRINT = auto()
    RETURN = auto()
    SUPER = auto()
    THIS = auto()
    TRUE = auto()
    VAR = auto()
    WHILE = auto()

    EOF = auto()


class Scanner:
    def __init__(self, source, errorfunction):
        self.source = source
        self.start = 0
        self.current = 0
        self.line = 1
        self.errorfunction = errorfunction
        self.tokens = []

    def scan_tokens(self):
        while not self.is_at_end():
            self.start = self.current
            self.scan_token()

        self.tokens.append(Token(TokenType.EOF, "", None, self.line))
        return self.tokens

    def is_at_end(self):
        return self.current >= len(self.source)

    def scan_token(self):
        c = self.advance()
        match c:
            case "(":
                self.add_token(TokenType.LEFT_PAREN, None)
            case ")":
                self.add_token(TokenType.RIGHT_PAREN, None)
            case "{":
                self.add_token(TokenType.LEFT_BRACE, None)
            case "}":
                self.add_token(TokenType.RIGHT_BRACE, None)
            case ",":
                self.add_token(TokenType.COMMA, None)
            case ".":
                self.add_token(TokenType.DOT, None)
            case "-":
                self.add_token(TokenType.MINUS, None)
            case "+":
                self.add_token(TokenType.PLUS, None)
            case ";":
                self.add_token(TokenType.SEMICOLON, None)
            case "*":
                self.add_token(TokenType.STAR, None)
            case "!":
                self.add_token(TokenType.BANG_EQUAL if self.match("=") else TokenType.BANG)
            case "=":
                self.add_token(TokenType.EQUAL_EQUAL if self.match("=") else TokenType.EQUAL)
            case "<":
                self.add_token(TokenType.LESS_EQUAL if self.match("=") else TokenType.LESS)
            case ">":
                self.add_token(TokenType.GREATER_EQUAL if self.match("=") else TokenType.GREATER)
            case "/":
                if self.match("/"):
                    # A comment until end of line
                    while self.peek() != "\n" and not self.is_at_end():
                        self.advance()
                else:
                    self.add_token(TokenType.SLASH)
            case " ":
                pass
            case "\r":
                pass
            case "\t":
                pass
            case "\n":
                self.line = self.line + 1
            case '"':
                self.string()
            case _:
                if c.isdigit():
                    self.number()
                else:
                    self.errorfunction(self.line, f"Unexpected character: {c}")

    def number(self):
        while self.peek().isdigit():
            self.advance()

        if self.peek() == "." and self.peek_next().isdigit():
            self.advance()

            while self.peek().isdigit():
                self.advance()
        
        self.add_token(TokenType.NUMBER, float(self.source[self.start:self.current]))

    def string(self):
        while self.peek() != '"' and not self.is_at_end():
            if self.peek() == '\n':
                self.line = self.line + 1
            self.advance()

        if self.is_at_end():
            self.errorfunction(self.line, f"Unterminated string")
            return

        self.advance()
        
        value = self.source[self.start + 1:self.current - 1]
        self.add_token(TokenType.STRING, value)

    def peek_next(self):
        if self.current + 1 >= len(self.source):
            return '\0'
        return self.source[self.current+1]

    def peek(self):
        if self.is_at_end():
            return '\0'
        return self.source[self.current]

    def match(self, expected: str):
        if self.is_at_end():
            return False
        if self.source[self.current] != expected:
            return False

        self.current = self.current + 1
        return True

    def advance(self):
        c = self.source[self.current]
        self.current = self.current + 1
        return c

    def add_token(self, _type: TokenType, literal=None):
        text = self.source[self.start:self.current]
        self.tokens.append(Token(_type, text, literal, self.line))


class Token:
    def __init__(self, _type: TokenType, lexeme: str, literal, line: int):
        self._type = _type
        self.lexeme = lexeme
        self.literal = literal
        self.line = line

    def to_string(self):
        return f"{self._type} {self.lexeme} {self.literal}"


class Lox:
    def run_file(self, path: Path) -> None:
        with open(path, "rb") as f:
            bytes = f.read()
        self.run(bytes)
        if self.had_error:
            exit(65)

    def run_prompt(self):
        print("> ", end="", flush=True)
        for line in sys.stdin:
            self.run(line)
            self.had_error = False
            print("> ", end="", flush=True)
        print("\n")

    def run(self, source: str):
        scanner = Scanner(source, self.error)
        tokens = scanner.scan_tokens()

        for token in tokens:
            print(token.to_string(), flush=True)

    def error(self, line: int, message: str):
        self.report(line, "", message)

    def report(self, line: int, where: str, message: str):
        print(f"[line {line}] Error{where}: {message}", file=sys.stderr, flush=True)
        self.had_error = True


def main():
    parser = ArgumentParser(
        description="jlox is an interpreter for the Lox language",
    )
    parser.add_argument(
        "script",
        nargs="?",
        type=Path,
        help="Path to Lox script",
    )
    args = parser.parse_args()

    session = Lox()
    if args.script:
        session.run_file(args.script)
    else:
        session.run_prompt()


main()
